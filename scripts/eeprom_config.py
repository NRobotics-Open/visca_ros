#!/usr/bin/env python3
from smbus2 import SMBus, i2c_msg
import time
from operator import eq
import RPi.GPIO as GPIO           # import RPi.GPIO module  


# Define registers values from datasheet
DEVICEADDRESS = 0x50

#GPIO Config
EEPROM_WRITE_PIN = 22
GPIO_USB_PIN = 24 #for toggling the usb pin on/off

EEPROM_ADR_LOW_BLOCK = 0x50 #0b.101.0000 0x50
EEPROM_ADR_HIGH_BLOCK = 0x54 #0b.101.0100 0x54
MAX_I2C_WRITE = 4 
LONG_BUFFER_LEN = 32
EE24LC01MAXBYTES = (1024*16)/8

MyBinaryImage = [
    0xA5, 0x5A, 0x06, 0xAB, 0x0D, 0x10, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00,
    0x20, 0x20, 0x09, 0x08, 0x0C, 0x59, 0x75, 0x7A, 0x75, 0x6B, 0x69, 0x48,
    0x43, 0x43, 0x20, 0x56, 0xFF, 0xFF, 0xFF, 0xFF, 0x0C, 0x59, 0x75, 0x7A,
    0x75, 0x6B, 0x69, 0x48, 0x43, 0x43, 0x20, 0x41, 0xFF, 0xFF, 0xFF, 0xFF,
    0x90, 0xDE, 0x16, 0xEF, 0xF0, 0x12, 0xCF, 0xE3, 0x90, 0xDE, 0x16, 0xE0,
    0xFF, 0x02, 0xCF, 0x1B, 0x90, 0xDE, 0x0C, 0xEE, 0xF0, 0xA3, 0xEF, 0xF0,
    0xA3, 0xED, 0xF0, 0x12, 0x5B, 0xCD, 0x22, 0xFF, 0x02, 0xD2, 0x23, 0x78,
    0xFF, 0xE4, 0xF6, 0xD8, 0xFD, 0x75, 0x81, 0x3C, 0x02, 0xD2, 0xA9, 0xFF,
    0x02, 0xD2, 0x09, 0xA9, 0x07, 0x90, 0xC6, 0xC4, 0xE0, 0xFE, 0xA3, 0xE0,
    0xFF, 0x90, 0xC6, 0xAF, 0xE0, 0xFC, 0xA3, 0xE0, 0xFD, 0xC3, 0x9F, 0xEC,
    0x9E, 0x50, 0x06, 0xAE, 0x04, 0xAF, 0x05, 0x80, 0x00, 0xAB, 0x07, 0xAA,
    0x06, 0xD3, 0xEB, 0x94, 0xA0, 0xEA, 0x94, 0x05, 0x40, 0x07, 0xE9, 0x60,
    0x04, 0x7A, 0x05, 0x7B, 0xA0, 0x90, 0xF8, 0xE6, 0xEB, 0xF0, 0xEA, 0xF9,
    0xA3, 0xF0, 0xD3, 0xED, 0x9B, 0xEC, 0x9A, 0x50, 0x08, 0x90, 0xF8, 0xE1,
    0x74, 0x47, 0xF0, 0x80, 0x1F, 0xEB, 0x25, 0xE0, 0xFF, 0xEA, 0x33, 0xFE,
    0xD3, 0x90, 0xC6, 0xB0, 0xE0, 0x9F, 0x90, 0xC6, 0xAF, 0xE0, 0x9E, 0x90,
    0xF8, 0xE1, 0x50, 0x05, 0x74, 0x4B, 0xF0, 0x80, 0x03, 0x74, 0x53, 0xF0,
    0x90, 0xC6, 0xAA, 0xE0, 0x90, 0xF9, 0x26, 0x30, 0xE0, 0x11, 0x74, 0x0F,
    0xF0, 0x90, 0xF9, 0x29, 0x74, 0x1F, 0xF0, 0x90, 0xF9, 0x36, 0x74, 0x0F,
    0xF0, 0x80, 0x0F, 0x74, 0x05, 0xF0, 0x90, 0xF9, 0x29, 0x74, 0x0B, 0xF0,
    0x90, 0xF9, 0x36, 0x74, 0x05, 0xF0, 0x90, 0xF9, 0x25, 0x74, 0xEF, 0xF0,
    0x90, 0xF9, 0x28, 0x74, 0xDE, 0xF0, 0x90, 0xF9, 0x35, 0x74, 0xEF, 0xF0,
    0x90, 0xF9, 0x47, 0x74, 0x0C, 0xF0, 0x90, 0xF9, 0x4A, 0x74, 0x12, 0xF0,
    0xEA, 0xC3, 0x13, 0xEB, 0x13, 0xFD, 0x90, 0xF9, 0x37, 0xF0, 0xEA, 0xC3,
    0x13, 0xFF, 0xA3, 0xF0, 0xA3, 0xED, 0xF0, 0xA3, 0xEF, 0xF0, 0x90, 0xFD,
    0x40, 0xEB, 0xF0, 0xA3, 0xE9, 0xF0, 0xAF, 0x03, 0xAE, 0x02, 0x90, 0xC6,
    0xC4, 0xE0, 0xFC, 0xA3, 0xE0, 0xFD, 0xE4, 0xFB, 0x12, 0xD2, 0x39, 0x90,
    0xFD, 0x3B, 0xEF, 0xF0, 0xEE, 0xA3, 0xF0, 0x90, 0xF8, 0xE0, 0x74, 0x01,
    0xF0, 0x90, 0xFD, 0x00, 0xF0, 0x22, 0x90, 0xDE, 0x01, 0xE0, 0xFF, 0xB4,
    0x01, 0x14, 0x90, 0xCB, 0xDB, 0xE0, 0x30, 0xE3, 0x0D, 0x90, 0xDE, 0x02,
    0xE0, 0xC3, 0x94, 0x19, 0x40, 0x04, 0xB2, 0xA0, 0xE4, 0xF0, 0xEF, 0xB4,
    0x01, 0x09, 0x90, 0xCB, 0xDB, 0xE0, 0x20, 0xE3, 0x02, 0xC2, 0xA0, 0x22,
    0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x21, 0x57, 0x36, 0x18,
    0xBD, 0xE9, 0x02, 0x00, 0x25, 0x1D, 0x01, 0x03, 0x80, 0x35, 0x1D, 0x78,
    0x22, 0xEE, 0x91, 0xA3, 0x54, 0x4C, 0x99, 0x26, 0x0F, 0x50, 0x54, 0x21,
    0x0F, 0x00, 0x81, 0x00, 0x81, 0x40, 0x81, 0x80, 0x90, 0x40, 0x95, 0x00,
    0x01, 0x01, 0xA9, 0x40, 0xB3, 0x00, 0x01, 0x1D, 0x00, 0x72, 0x51, 0xD0,
    0x1E, 0x20, 0x6E, 0x28, 0x55, 0x00, 0x0F, 0x48, 0x42, 0x00, 0x00, 0x1E,
    0x0E, 0x1F, 0x00, 0x80, 0x51, 0x00, 0x1E, 0x30, 0x40, 0x80, 0x37, 0x00,
    0x0F, 0x48, 0x42, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFC, 0x00, 0x4D, 0x41, 0x43, 0x52, 0x4F, 0x53, 0x49,
    0x4C, 0x49, 0x43, 0x4F, 0x4E, 0x0A, 0x01, 0x19, 0x02, 0x03, 0x34, 0xF1,
    0x52, 0x02, 0x11, 0x13, 0x84, 0x1F, 0x10, 0x03, 0x12, 0x06, 0x15, 0x07,
    0x16, 0x05, 0x14, 0x5E, 0x5F, 0x63, 0x64, 0x23, 0x09, 0x7F, 0x07, 0x83,
    0x01, 0x00, 0x00, 0x6E, 0x03, 0x0C, 0x00, 0x10, 0x00, 0x00, 0x3C, 0x20,
    0x00, 0x80, 0x01, 0x02, 0x03, 0x04, 0xE5, 0x0E, 0x61, 0x60, 0x65, 0x66,
    0x66, 0x21, 0x50, 0xB0, 0x51, 0x00, 0x1B, 0x30, 0x40, 0x70, 0x36, 0x00,
    0x0F, 0x48, 0x42, 0x00, 0x00, 0x1E, 0x66, 0x21, 0x56, 0xAA, 0x51, 0x00,
    0x1E, 0x30, 0x46, 0x8F, 0x33, 0x00, 0x0F, 0x48, 0x42, 0x00, 0x00, 0x1E,
    0x8C, 0x0A, 0xD0, 0x8A, 0x20, 0xE0, 0x2D, 0x10, 0x10, 0x3E, 0x96, 0x00,
    0x10, 0x09, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xB2, 0x90, 0xCB, 0xD3, 0xE0, 0x24, 0x34, 0xFF, 0x90,
    0xCB, 0xD2, 0xE0, 0x34, 0x00, 0xFE, 0x12, 0xD2, 0x7F, 0x90, 0xDE, 0x03,
    0xEF, 0xF0, 0x90, 0xCB, 0xD3, 0xE0, 0x24, 0x35, 0xFF, 0x90, 0xCB, 0xD2,
    0xE0, 0x34, 0x00, 0xFE, 0x12, 0xD2, 0x7F, 0x90, 0xDE, 0x04, 0xEF, 0xF0,
    0x90, 0xCB, 0xD3, 0xE0, 0x24, 0x36, 0xFF, 0x90, 0xCB, 0xD2, 0xE0, 0x34,
    0x00, 0xFE, 0x12, 0xD2, 0x7F, 0x90, 0xDE, 0x05, 0xEF, 0xF0, 0x90, 0xCB,
    0xD3, 0xE0, 0x24, 0x37, 0xFF, 0x90, 0xCB, 0xD2, 0xE0, 0x34, 0x00, 0xFE,
    0x12, 0xD2, 0x7F, 0x90, 0xDE, 0x06, 0xEF, 0xF0, 0x90, 0xDE, 0x03, 0xE0,
    0x90, 0xFE, 0x90, 0xF0, 0x90, 0xDE, 0x04, 0xE0, 0x90, 0xFE, 0x91, 0xF0,
    0x90, 0xDE, 0x05, 0xE0, 0x90, 0xFE, 0x93, 0xF0, 0x90, 0xDE, 0x06, 0xE0,
    0x90, 0xFE, 0x92, 0xF0, 0x90, 0xFE, 0x90, 0xE0, 0x90, 0xC6, 0xA0, 0xF0,
    0x90, 0xFE, 0x90, 0xE0, 0xC3, 0x64, 0x80, 0x94, 0x80, 0x50, 0x04, 0x7F,
    0xFF, 0x80, 0x02, 0x7F, 0x00, 0x90, 0xC6, 0xA1, 0xEF, 0xF0, 0x90, 0xFE,
    0x91, 0xE0, 0x90, 0xC6, 0xA2, 0xF0, 0xE4, 0xA3, 0xF0, 0x90, 0xFE, 0x93,
    0xE0, 0x90, 0xC6, 0xA4, 0xF0, 0x90, 0xFE, 0x93, 0xE0, 0xC3, 0x64, 0x80,
    0x94, 0x80, 0x50, 0x04, 0x7F, 0xFF, 0x80, 0x02, 0x7F, 0x00, 0x90, 0xC6,
    0xA5, 0xEF, 0xF0, 0x90, 0xFE, 0x92, 0xE0, 0x90, 0xC6, 0xA6, 0xF0, 0xE4,
    0xA3, 0xF0, 0x22, 0xEF, 0x14, 0x60, 0x4E, 0x14, 0x60, 0x68, 0x24, 0xFA,
    0x70, 0x03, 0x02, 0xCF, 0xD9, 0x24, 0xFD, 0x60, 0x51, 0x24, 0xFE, 0x70,
    0x03, 0x02, 0xCF, 0xBA, 0x14, 0x70, 0x03, 0x02, 0xCF, 0xC1, 0x24, 0xFC,
    0x70, 0x03, 0x02, 0xCF, 0xC9, 0x24, 0x12, 0x60, 0x03, 0x02, 0xCF, 0xE2,
    0x90, 0xCB, 0xDB, 0xE0, 0x30, 0xE1, 0x02, 0xD2, 0x11, 0xC2, 0x0C, 0x90,
    0xCB, 0xDA, 0xE0, 0x30, 0xE1, 0x07, 0xE4, 0x90, 0xC7, 0x5D, 0xF0, 0x80,
    0x06, 0x90, 0xC7, 0x5D, 0x74, 0x01, 0xF0, 0xE4, 0x90, 0xDE, 0x00, 0xF0,
    0x22, 0x90, 0xCB, 0xDB, 0xE0, 0x30, 0xE2, 0x03, 0x12, 0xCE, 0x50, 0x90,
    0xCB, 0xD4, 0xE0, 0x44, 0x08, 0xF0, 0x90, 0xCB, 0xDB, 0xE0, 0xC4, 0x54,
    0x0F, 0x90, 0xFE, 0xBA, 0xF0, 0x22, 0x90, 0xCB, 0xDB, 0xE0, 0x30, 0xE2,
    0x03, 0x12, 0xD0, 0xA7, 0x12, 0xCD, 0x26, 0x90, 0xCB, 0xDA, 0xE0, 0x54,
    0x0C, 0xFF, 0x90, 0xDE, 0x00, 0xE0, 0x6F, 0x60, 0x3D, 0xEF, 0xF0, 0x70,
    0x04, 0xFF, 0x12, 0xD2, 0x94, 0x90, 0xDE, 0x00, 0xE0, 0x64, 0x08, 0x70,
    0x2D, 0x7F, 0x01, 0x02, 0xD2, 0x94, 0x90, 0xDE, 0x01, 0x74, 0x01, 0xF0,
    0x22, 0xE4, 0x90, 0xDE, 0x01, 0xF0, 0xD2, 0xA0, 0x22, 0x30, 0x11, 0x16,
    0x90, 0xF8, 0x3C, 0x74, 0x05, 0xF0, 0x90, 0xF8, 0x0B, 0x74, 0x81, 0xF0,
    0x22, 0x7B, 0xFF, 0x7A, 0xCD, 0x79, 0x50, 0x12, 0xD2, 0x62, 0x22, 0xEF,
    0x12, 0xD1, 0xE3, 0xD0, 0x06, 0x00, 0xD0, 0x2B, 0x01, 0xD0, 0x51, 0x02,
    0xD0, 0x84, 0x0A, 0xD0, 0x2B, 0x0B, 0xD0, 0x71, 0x0C, 0xD0, 0x81, 0x0E,
    0xD0, 0x8B, 0x0F, 0xD0, 0x9E, 0x14, 0x00, 0x00, 0xD0, 0xA6, 0x90, 0xC7,
    0x81, 0x74, 0x04, 0xF0, 0x90, 0xC7, 0x83, 0x74, 0x20, 0xF0, 0x90, 0xC7,
    0x82, 0x74, 0x1C, 0xF0, 0x90, 0xF8, 0x0B, 0x74, 0xC1, 0xF0, 0x90, 0xF8,
    0x14, 0x74, 0x23, 0xF0, 0x90, 0xC6, 0x97, 0x74, 0x02, 0xF0, 0x22, 0x90,
    0xFE, 0x20, 0x74, 0x2A, 0xF0, 0x12, 0xD2, 0x71, 0x90, 0xF9, 0x2C, 0x74,
    0x20, 0xF0, 0x90, 0xE3, 0x3C, 0x74, 0xF5, 0xF0, 0xA3, 0x74, 0x0F, 0xF0,
    0xA3, 0xE4, 0xF0, 0xA3, 0xF0, 0x90, 0xF8, 0x05, 0xE0, 0x54, 0xFC, 0xF0,
    0x22, 0x12, 0xD1, 0xB1, 0x90, 0xEF, 0xE0, 0xE0, 0x30, 0xE6, 0x4B, 0x90,
    0xEF, 0xE8, 0x74, 0x40, 0xF0, 0xA3, 0xE4, 0xF0, 0xA3, 0xF0, 0xA3, 0xF0,
    0x90, 0xC7, 0x76, 0xF0, 0xA3, 0x74, 0xC8, 0xF0, 0x22, 0x30, 0x00, 0x03,
    0x12, 0xD1, 0x6A, 0x90, 0xF9, 0xAF, 0x74, 0x22, 0xF0, 0x74, 0x02, 0xF0,
    0x22, 0x02, 0xD2, 0x71, 0x90, 0xF9, 0xAF, 0x74, 0x22, 0xF0, 0x22, 0xE4,
    0x90, 0xC5, 0x4F, 0xF0, 0x90, 0xEF, 0xD0, 0xF0, 0xA3, 0x74, 0x30, 0xF0,
    0xA3, 0xE4, 0xF0, 0xA3, 0xF0, 0x22, 0x12, 0xD1, 0x6A, 0x7F, 0xFF, 0x12,
    0xD2, 0x8B, 0x22, 0x90, 0xFE, 0x90, 0xE0, 0xFF, 0x90, 0xDE, 0x03, 0xE0,
    0x6F, 0x60, 0x23, 0x90, 0xFE, 0x90, 0xE0, 0x90, 0xDE, 0x03, 0xF0, 0xC2,
    0xA5, 0x7F, 0x01, 0x12, 0xD2, 0x8B, 0x90, 0xCB, 0xD3, 0xE0, 0x24, 0x34,
    0xFF, 0x90, 0xCB, 0xD2, 0xE0, 0x34, 0x00, 0xFE, 0x90, 0xDE, 0x03, 0x02,
    0xD1, 0x5E, 0x90, 0xFE, 0x91, 0xE0, 0xFF, 0x90, 0xDE, 0x04, 0xE0, 0x6F,
    0x60, 0x22, 0x90, 0xFE, 0x91, 0xE0, 0x90, 0xDE, 0x04, 0xF0, 0xC2, 0xA5,
    0x7F, 0x01, 0x12, 0xD2, 0x8B, 0x90, 0xCB, 0xD3, 0xE0, 0x24, 0x35, 0xFF,
    0x90, 0xCB, 0xD2, 0xE0, 0x34, 0x00, 0xFE, 0x90, 0xDE, 0x04, 0x80, 0x5A,
    0x90, 0xFE, 0x93, 0xE0, 0xFF, 0x90, 0xDE, 0x05, 0xE0, 0x6F, 0x60, 0x22,
    0x90, 0xFE, 0x93, 0xE0, 0x90, 0xDE, 0x05, 0xF0, 0xC2, 0xA5, 0x7F, 0x01,
    0x12, 0xD2, 0x8B, 0x90, 0xCB, 0xD3, 0xE0, 0x24, 0x36, 0xFF, 0x90, 0xCB,
    0xD2, 0xE0, 0x34, 0x00, 0xFE, 0x90, 0xDE, 0x05, 0x80, 0x2C, 0x90, 0xFE,
    0x92, 0xE0, 0xFF, 0x90, 0xDE, 0x06, 0xE0, 0x6F, 0x60, 0x27, 0x90, 0xFE,
    0x92, 0xE0, 0x90, 0xDE, 0x06, 0xF0, 0xC2, 0xA5, 0x7F, 0x01, 0x12, 0xD2,
    0x8B, 0x90, 0xCB, 0xD3, 0xE0, 0x24, 0x37, 0xFF, 0x90, 0xCB, 0xD2, 0xE0,
    0x34, 0x00, 0xFE, 0x90, 0xDE, 0x06, 0xE0, 0xFD, 0x12, 0xCC, 0x10, 0xD2,
    0xA5, 0x7F, 0x0A, 0x02, 0xD2, 0x8B, 0x90, 0xF8, 0x06, 0x74, 0x30, 0xF0,
    0x90, 0xC6, 0xC6, 0xE0, 0xFE, 0xA3, 0xE0, 0xFF, 0xC3, 0x90, 0xC6, 0xB2,
    0xE0, 0x9F, 0x90, 0xC6, 0xB1, 0xE0, 0x9E, 0x40, 0x26, 0x90, 0xC6, 0xAA,
    0xE0, 0x30, 0xE0, 0x1F, 0xE5, 0x36, 0x94, 0x03, 0x50, 0x15, 0xE5, 0x37,
    0x94, 0x0A, 0x40, 0x0F, 0x90, 0xC6, 0xB5, 0xE0, 0xD3, 0x94, 0x0B, 0x40,
    0x06, 0x90, 0xF8, 0x06, 0x74, 0x20, 0xF0, 0xE4, 0xFF, 0x80, 0x02, 0x7F,
    0x01, 0x12, 0xCC, 0x33, 0x22, 0x90, 0xF1, 0xF0, 0xE0, 0x70, 0x2B, 0xE5,
    0x3B, 0x60, 0x27, 0xC2, 0xAF, 0x90, 0xC6, 0xA0, 0xE0, 0x90, 0xFE, 0x90,
    0xF0, 0x90, 0xC6, 0xA2, 0xE0, 0x90, 0xFE, 0x91, 0xF0, 0x90, 0xC6, 0xA4,
    0xE0, 0x90, 0xFE, 0x93, 0xF0, 0x90, 0xC6, 0xA6, 0xE0, 0x90, 0xFE, 0x92,
    0xF0, 0xE4, 0xF5, 0x3B, 0xD2, 0xAF, 0x22, 0xD0, 0x83, 0xD0, 0x82, 0xF8,
    0xE4, 0x93, 0x70, 0x12, 0x74, 0x01, 0x93, 0x70, 0x0D, 0xA3, 0xA3, 0x93,
    0xF8, 0x74, 0x01, 0x93, 0xF5, 0x82, 0x88, 0x83, 0xE4, 0x73, 0x74, 0x02,
    0x93, 0x68, 0x60, 0xEF, 0xA3, 0xA3, 0xA3, 0x80, 0xDF, 0x90, 0xC7, 0x77,
    0xE0, 0x04, 0xF0, 0x70, 0x06, 0x90, 0xC7, 0x76, 0xE0, 0x04, 0xF0, 0x90,
    0xDE, 0x02, 0xE0, 0x04, 0xF0, 0x90, 0xF0, 0x05, 0xE4, 0xF0, 0x22, 0xE5,
    0x33, 0x30, 0xE2, 0x10, 0x90, 0xCB, 0xDB, 0xE0, 0x30, 0xE0, 0x09, 0x53,
    0x33, 0xFB, 0x12, 0xD2, 0xA5, 0x12, 0xD2, 0x4E, 0x22, 0x90, 0xDE, 0x07,
    0xEE, 0xF0, 0xA3, 0xEF, 0xF0, 0xA3, 0xEC, 0xF0, 0xA3, 0xED, 0xF0, 0xA3,
    0xEB, 0xF0, 0x12, 0x52, 0xDD, 0x22, 0x90, 0xC4, 0xC5, 0x74, 0x02, 0xF0,
    0x90, 0xC4, 0xC9, 0x74, 0x80, 0xF0, 0xA3, 0x74, 0xBB, 0xF0, 0xE4, 0xA3,
    0xF0, 0x22, 0x90, 0xDE, 0x0F, 0xEB, 0xF0, 0xA3, 0xEA, 0xF0, 0xA3, 0xE9,
    0xF0, 0x12, 0x63, 0x45, 0x22, 0x12, 0xD2, 0x9D, 0x90, 0xF8, 0x14, 0x74,
    0x33, 0xF0, 0x14, 0xF0, 0x02, 0xD2, 0xA1, 0x90, 0xDE, 0x12, 0xEE, 0xF0,
    0xA3, 0xEF, 0xF0, 0x12, 0x6B, 0xBA, 0x22, 0x90, 0xDE, 0x14, 0xEF, 0xF0,
    0x12, 0x69, 0xFB, 0x22, 0x90, 0xDE, 0x15, 0xEF, 0xF0, 0x12, 0x62, 0x4C,
    0x22, 0x12, 0x60, 0x3C, 0x22, 0x12, 0x58, 0x84, 0x22, 0x12, 0x60, 0x69,
    0x22, 0x80, 0xFE, 0x14, 0xC3, 0x7A, 0x57, 0xFF
]

def configure_gpio():
    print("Setting up GPIO pin %i ...\n" % EEPROM_WRITE_PIN)
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(EEPROM_WRITE_PIN, GPIO.OUT) 
    GPIO.output(EEPROM_WRITE_PIN, 0) #set pin low
    time.sleep(0.5)
    print("Pin setup complete!\n")

def main():
    '''
    Main program function
    '''
    
    configure_gpio()
    #while True:
    with SMBus(10) as bus:
        print("\nWriting EEPROM ...")
        counter = 0
        last_read_offset = 0
        for i, val in enumerate(MyBinaryImage):
            counter +=1
            if(counter == MAX_I2C_WRITE):
                dt_start_offset = (i - counter)
                dt_start_offset = 0 if (dt_start_offset < 0) else (dt_start_offset + 1)
                dt_end_offset = i + 1
                print("Index: %i - Start Offset: %i - End Offset: %i" %(i, dt_start_offset, dt_end_offset))
                print("Bytes to write: ", MyBinaryImage[dt_start_offset : dt_end_offset], "\n")
                bus.write_i2c_block_data(DEVICEADDRESS, dt_start_offset, MyBinaryImage[dt_start_offset:dt_end_offset])
                time.sleep(0.05)  # Wait 50ms

                if((dt_end_offset - last_read_offset) >= LONG_BUFFER_LEN): #begin reading if more than 64 bytes has been written
                    print("Reading from %i to %i\n" % (last_read_offset, dt_end_offset))
                    block = bus.read_i2c_block_data(DEVICEADDRESS, last_read_offset, LONG_BUFFER_LEN) # addr, offset, bytes
                    print("Read | ", block, "\n")
                    cmp_block = MyBinaryImage[last_read_offset : dt_end_offset]
                    print("Wrote| ", cmp_block, "\n")
                    last_read_offset = dt_end_offset
                    if(eq(set(block), set(cmp_block))):
                        print("+++ Match +++ \n")
                    else:
                        print("Error in data verification!!")
                        exit(-1)
                    time.sleep(0.05)  # Wait 50ms
                
                counter = 0
                """ if (i >= 12):
                    exit(-1) """
        
        print("\n End of Config ...")
        exit(0)


        """ data = [1, 2, 3, 4, 5, 6, 7, 8] #block of 8 bytes
        bus.write_i2c_block_data(80, 0, data) #address, offset, data
        bus.write_byte_data(DEVICEADDRESS, 0, 0x02) #address, offset, data """

        # Write some bytes to address 80
        """ msg = i2c_msg.write(DEVICEADDRESS, [65, 66, 67, 68])
        bus.i2c_rdwr(msg) """

        # Single transaction writing two bytes then read two at address 80
        """ write = i2c_msg.write(80, [40, 50])
        read = i2c_msg.read(80, 2)
        bus.i2c_rdwr(write, read) """

if __name__ == "__main__":
    main()